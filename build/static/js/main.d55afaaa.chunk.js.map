{"version":3,"sources":["components/molecules/bottombar/index.tsx","containers/organisms/common/layout.tsx","components/molecules/measure/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BottomBar","_ref","handleChange","react","index_es","onChange","_","v","showLabels","label","LayoutOrg","handleBottomBar","react_default","a","createElement","style","height","width","overflow","this","props","children","position","bottom","zIndex","bottombar","Component","MeasureWrap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","_this$state","index_esm","bounds","onResize","contentRect","setState","objectSpread","measureRef","ref","target","React","Test","peer","handleScan","data","result","handleError","err","console","error","WebRTC","makeOffer","signal","sdp","qr","JSON","stringify","getLocalVideo","stream","layout_LayoutOrg","display","justifyContent","alignItems","flexDirection","lib_default","delay","onError","onScan","measure_MeasureWrap","b","qrcode_react_lib_default","value","size","Boolean","window","location","hostname","match","ReactDOM","render","App_Test","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d55afaaa.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\n\nconst BottomBar: React.FunctionComponent<{\n  handleChange: (value: any) => void;\n}> = ({ handleChange }) => {\n  return (\n    <BottomNavigation onChange={(_, v) => handleChange(v)} showLabels>\n      <BottomNavigationAction label=\"connect\" />\n      <BottomNavigationAction label=\"text\" />\n      <BottomNavigationAction label=\"video\" />\n    </BottomNavigation>\n  );\n};\n\nexport default BottomBar;\n","import React, { Component } from \"react\";\n\nimport BottomBar from \"../../../components/molecules/bottombar/index\";\n\nexport default class LayoutOrg extends Component<{}, {}> {\n  handleBottomBar = (v: number) => {};\n  render() {\n    return (\n      <div>\n        <div style={{ height: \"95vh\", width: \"100vw\", overflow: \"hidden\" }}>\n          {this.props.children}\n        </div>\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: 0,\n            width: \"100%\",\n            zIndex: 9999\n          }}\n        >\n          <BottomBar handleChange={this.handleBottomBar} />\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport Measure from \"react-measure\";\n\nexport default class MeasureWrap extends React.Component<\n  { target: (width: number, height: number) => any },\n  { width: number; height: number }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n  }\n\n  render() {\n    const { width, height } = this.state;\n    return (\n      <Measure\n        bounds\n        onResize={contentRect => {\n          if (!contentRect.bounds) return;\n          this.setState({ ...contentRect.bounds });\n        }}\n      >\n        {({ measureRef }) => (\n          <div ref={measureRef} style={{ width: \"100%\", height: \"100%\" }}>\n            {this.props.target(width, height)}\n          </div>\n        )}\n      </Measure>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport QRCode from \"qrcode.react\";\nimport LayoutOrg from \"./containers/organisms/common/layout\";\nimport { getLocalVideo } from \"webrtc4me/lib/utill\";\nimport WebRTC from \"webrtc4me\";\nimport MeasureWrap from \"./components/molecules/measure/index\";\n\nexport default class Test extends Component<\n  {},\n  { stream?: MediaStream; qr: string; result?: string }\n> {\n  peer: WebRTC;\n  constructor(props: any) {\n    super(props);\n    this.peer = new WebRTC();\n    this.peer.makeOffer();\n    this.peer.signal = sdp => {\n      this.setState({ qr: JSON.stringify(sdp) });\n    };\n    this.state = { qr: \"\" };\n  }\n\n  async init() {\n    const stream = await getLocalVideo();\n    this.setState({ stream });\n  }\n\n  handleScan = (data: any) => {\n    if (data) {\n      this.setState({ result: data });\n    }\n  };\n  handleError = (err: any) => {\n    console.error(err);\n  };\n  render() {\n    return (\n      <LayoutOrg>\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\"\n          }}\n        >\n          <div style={{ height: \"40vh\" }}>\n            <QrReader\n              delay={300}\n              onError={this.handleError}\n              onScan={this.handleScan}\n              style={{ width: \"40vh\" }}\n            />\n          </div>\n          <br />\n          <div style={{ height: \"45vh\" }}>\n            <MeasureWrap\n              target={(_, b) => {\n                return <QRCode value={this.state.qr} size={b} />;\n              }}\n            />\n          </div>\n          <p>{this.state.result}</p>\n        </div>\n      </LayoutOrg>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}